Index: app/src/main/java/ru/practicum/android/diploma/details/ui/DetailsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.details.ui\r\n\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport androidx.core.text.HtmlCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.lifecycle.lifecycleScope\r\nimport com.bumptech.glide.Glide\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.serialization.json.Json\r\nimport ru.practicum.android.diploma.R\r\nimport ru.practicum.android.diploma.databinding.FragmentDetailsBinding\r\nimport ru.practicum.android.diploma.details.view_model.DetailsViewModel\r\nimport ru.practicum.android.diploma.root.RootActivity\r\nimport ru.practicum.android.diploma.search.domain.Vacancy\r\nimport ru.practicum.android.diploma.search.domain.models.VacancyFullInfoModel\r\nimport ru.practicum.android.diploma.util.thisName\r\nimport ru.practicum.android.diploma.util.viewBinding\r\n\r\n/** Фрагмент для отображения детальной информации о вакансии */\r\nclass DetailsFragment : Fragment(R.layout.fragment_details) {\r\n\r\n    private val binding by viewBinding<FragmentDetailsBinding>()\r\n    private val viewModel: DetailsViewModel by viewModels { (activity as RootActivity).viewModelFactory }\r\n\r\n    private var vacancy: Vacancy? = null\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        vacancy = requireArguments()\r\n            .getString(VACANCY_KEY)\r\n            ?.let { Json.decodeFromString<Vacancy>(it) }\r\n\r\n        viewModel.log(thisName, \"onViewCreated()\")\r\n        drawMainInfo()\r\n        viewModel.getVacancyByID()\r\n        collector()\r\n    }\r\n\r\n    /** Функция для сбора данных из viewModel */\r\n    private fun collector() {\r\n        viewLifecycleOwner.lifecycleScope.launch(Dispatchers.Main) {\r\n            viewModel.uiState.collect { state ->\r\n                viewModel.log(thisName, \"uiState.collect { state -> ${state.thisName}\")\r\n                when (state) {\r\n                    is DetailsScreenState.Empty -> Unit\r\n                    is DetailsScreenState.Content -> {\r\n                        showDescription(state.result)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Функция для отображения(отрисовки) описания вакансии, опыта, графика работы, ключевых навыков, контактов */\r\n    private fun showDescription(vacancy: VacancyFullInfoModel) = with(binding) {\r\n        viewModel.log(thisName, \"showDescription()\")\r\n        tvExperience.text = vacancy.experience?.name\r\n        val tvSchedule = vacancy.employment?.name + \". \" + vacancy.schedule?.name\r\n        tvScheduleEmployment.text = tvSchedule\r\n        val formattedDescription = HtmlCompat.fromHtml(vacancy.description!!, HtmlCompat.FROM_HTML_MODE_LEGACY)\r\n        tvDescription.text = formattedDescription\r\n        val tvKeySkillsList = vacancy.keySkills?.mapIndexed { _, skill -> \"• ${skill.name}\" }?.joinToString(\"\\n\")\r\n        tvKeySkills.text = tvKeySkillsList\r\n        tvContactsName.text = vacancy.contacts?.name\r\n        tvContactsEmail.text = vacancy.contacts?.email\r\n        val phoneList = vacancy.contacts?.phones?.mapIndexed { _, phone -> \"+\" + phone.country +\r\n                \" (${phone.city}) \" + phone.number }?.joinToString(\"\\n\")\r\n        tvContactsPhone.text = phoneList\r\n    }\r\n\r\n\r\n    /** Функция для отображения(отрисовки) заголовка, зарплаты, формы. Информацию получаем из bundle */\r\n    private fun drawMainInfo() = with(binding) {\r\n        viewModel.log(thisName, \"drawMainInfo()\")\r\n        vacancy?.let {\r\n            tvNameOfVacancy.text = it.title\r\n            tvSalary.text = it.salary\r\n            tvNameOfCompany.text = it.company\r\n            tvArea.text = it.area\r\n            Glide.with(this@DetailsFragment)\r\n                .load(it.iconUri)\r\n                .placeholder(R.drawable.ic_placeholder_company)\r\n                .into(imageView)\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        const val VACANCY_KEY = \"KEY_DETAILS\"\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/details/ui/DetailsFragment.kt b/app/src/main/java/ru/practicum/android/diploma/details/ui/DetailsFragment.kt
--- a/app/src/main/java/ru/practicum/android/diploma/details/ui/DetailsFragment.kt	
+++ b/app/src/main/java/ru/practicum/android/diploma/details/ui/DetailsFragment.kt	
@@ -2,92 +2,16 @@
 
 import android.os.Bundle
 import android.view.View
-import androidx.core.text.HtmlCompat
 import androidx.fragment.app.Fragment
-import androidx.fragment.app.viewModels
-import androidx.lifecycle.lifecycleScope
-import com.bumptech.glide.Glide
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.launch
-import kotlinx.serialization.json.Json
 import ru.practicum.android.diploma.R
 import ru.practicum.android.diploma.databinding.FragmentDetailsBinding
-import ru.practicum.android.diploma.details.view_model.DetailsViewModel
-import ru.practicum.android.diploma.root.RootActivity
-import ru.practicum.android.diploma.search.domain.Vacancy
-import ru.practicum.android.diploma.search.domain.models.VacancyFullInfoModel
-import ru.practicum.android.diploma.util.thisName
 import ru.practicum.android.diploma.util.viewBinding
 
-/** Фрагмент для отображения детальной информации о вакансии */
+
 class DetailsFragment : Fragment(R.layout.fragment_details) {
-
-    private val binding by viewBinding<FragmentDetailsBinding>()
-    private val viewModel: DetailsViewModel by viewModels { (activity as RootActivity).viewModelFactory }
-
-    private var vacancy: Vacancy? = null
+private val binding by viewBinding<FragmentDetailsBinding>()
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-        vacancy = requireArguments()
-            .getString(VACANCY_KEY)
-            ?.let { Json.decodeFromString<Vacancy>(it) }
-
-        viewModel.log(thisName, "onViewCreated()")
-        drawMainInfo()
-        viewModel.getVacancyByID()
-        collector()
-    }
-
-    /** Функция для сбора данных из viewModel */
-    private fun collector() {
-        viewLifecycleOwner.lifecycleScope.launch(Dispatchers.Main) {
-            viewModel.uiState.collect { state ->
-                viewModel.log(thisName, "uiState.collect { state -> ${state.thisName}")
-                when (state) {
-                    is DetailsScreenState.Empty -> Unit
-                    is DetailsScreenState.Content -> {
-                        showDescription(state.result)
-                    }
-                }
-            }
-        }
-    }
-
-    /** Функция для отображения(отрисовки) описания вакансии, опыта, графика работы, ключевых навыков, контактов */
-    private fun showDescription(vacancy: VacancyFullInfoModel) = with(binding) {
-        viewModel.log(thisName, "showDescription()")
-        tvExperience.text = vacancy.experience?.name
-        val tvSchedule = vacancy.employment?.name + ". " + vacancy.schedule?.name
-        tvScheduleEmployment.text = tvSchedule
-        val formattedDescription = HtmlCompat.fromHtml(vacancy.description!!, HtmlCompat.FROM_HTML_MODE_LEGACY)
-        tvDescription.text = formattedDescription
-        val tvKeySkillsList = vacancy.keySkills?.mapIndexed { _, skill -> "• ${skill.name}" }?.joinToString("\n")
-        tvKeySkills.text = tvKeySkillsList
-        tvContactsName.text = vacancy.contacts?.name
-        tvContactsEmail.text = vacancy.contacts?.email
-        val phoneList = vacancy.contacts?.phones?.mapIndexed { _, phone -> "+" + phone.country +
-                " (${phone.city}) " + phone.number }?.joinToString("\n")
-        tvContactsPhone.text = phoneList
-    }
-
-
-    /** Функция для отображения(отрисовки) заголовка, зарплаты, формы. Информацию получаем из bundle */
-    private fun drawMainInfo() = with(binding) {
-        viewModel.log(thisName, "drawMainInfo()")
-        vacancy?.let {
-            tvNameOfVacancy.text = it.title
-            tvSalary.text = it.salary
-            tvNameOfCompany.text = it.company
-            tvArea.text = it.area
-            Glide.with(this@DetailsFragment)
-                .load(it.iconUri)
-                .placeholder(R.drawable.ic_placeholder_company)
-                .into(imageView)
-        }
-    }
-
-    companion object {
-        const val VACANCY_KEY = "KEY_DETAILS"
     }
 }
\ No newline at end of file
Index: app/src/main/java/ru/practicum/android/diploma/util/MockVacancy.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.util\r\n\r\nimport ru.practicum.android.diploma.search.domain.models.Vacancy\r\nimport kotlin.random.Random\r\n\r\nfun getMockVacancy(): Vacancy {\r\n    return Vacancy(\r\n        id = Random.nextLong(),\r\n        iconUri = \"https://cs8.pikabu.ru/avatars/2404/x2404686-1153049926.png\",\r\n        title =  titles.random(),\r\n        company = companies.random(),\r\n        salary = Random.nextInt(200000, 400000).toString(),\r\n        date = System.currentTimeMillis()\r\n        )\r\n}\r\nprivate val companies = listOf(\"Ynadex\", \"Google\", \"Tinkoff\", \"Sber\", \"Gazprom\")\r\nprivate val titles = listOf(\"android-developer\", \"python-dev\",\"devOps\", \"manager\",\"pilot\")\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/util/MockVacancy.kt b/app/src/main/java/ru/practicum/android/diploma/util/MockVacancy.kt
--- a/app/src/main/java/ru/practicum/android/diploma/util/MockVacancy.kt	
+++ b/app/src/main/java/ru/practicum/android/diploma/util/MockVacancy.kt	
@@ -10,9 +10,11 @@
         title =  titles.random(),
         company = companies.random(),
         salary = Random.nextInt(200000, 400000).toString(),
+        area = area.random(),
         date = System.currentTimeMillis()
         )
 }
 private val companies = listOf("Ynadex", "Google", "Tinkoff", "Sber", "Gazprom")
 private val titles = listOf("android-developer", "python-dev","devOps", "manager","pilot")
+private val area = listOf("Владивосток", "Москва", "Санкт-Петербург", "Казань", "Новосибирск")
 
Index: app/src/main/java/ru/practicum/android/diploma/search/domain/models/Vacancy.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.search.domain.models\r\n\r\nimport ru.practicum.android.diploma.di.annotations.TestClass\r\nimport ru.practicum.android.diploma.search.data.network.test.TrackDto\r\n\r\ndata class Vacancy(\r\n    val id: Long,\r\n    val iconUri: String = \"\",\r\n    val title: String = \"\",\r\n    val company: String = \"\",\r\n    val salary: String = \"\",\r\n    val date : Long = 0L\r\n)\r\n@TestClass\r\nfun TrackDto.toVacancy(): Vacancy{\r\n    return with(this) {\r\n        Vacancy(id = trackId,\r\n            iconUri = image?:\"\",\r\n            title = trackName?:\"\",\r\n            company = artistName?:\"\",\r\n            salary = year.toString()?:\"\",\r\n            date = 0L\r\n            )\r\n    }\r\n}\r\n@TestClass\r\nfun mapTracksToVacancies(tracks: List<TrackDto>): List<Vacancy>{\r\n    return tracks.map { it.toVacancy() }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/search/domain/models/Vacancy.kt b/app/src/main/java/ru/practicum/android/diploma/search/domain/models/Vacancy.kt
--- a/app/src/main/java/ru/practicum/android/diploma/search/domain/models/Vacancy.kt	
+++ b/app/src/main/java/ru/practicum/android/diploma/search/domain/models/Vacancy.kt	
@@ -1,16 +1,20 @@
 package ru.practicum.android.diploma.search.domain.models
 
+import kotlinx.serialization.Serializable
 import ru.practicum.android.diploma.di.annotations.TestClass
 import ru.practicum.android.diploma.search.data.network.test.TrackDto
 
+@Serializable
 data class Vacancy(
     val id: Long,
     val iconUri: String = "",
     val title: String = "",
     val company: String = "",
     val salary: String = "",
+    val area: String = "Владивосток",
     val date : Long = 0L
 )
+
 @TestClass
 fun TrackDto.toVacancy(): Vacancy{
     return with(this) {
Index: app/schemas/ru.practicum.android.diploma.details.data.db.FavoriteVacanciesDb/1.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"formatVersion\": 1,\r\n  \"database\": {\r\n    \"version\": 1,\r\n    \"identityHash\": \"2123ebc230221aef59ae2ac4a7ba1758\",\r\n    \"entities\": [\r\n      {\r\n        \"tableName\": \"favorite_vacancies\",\r\n        \"createSql\": \"CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER NOT NULL, `iconUri` TEXT NOT NULL, `title` TEXT NOT NULL, `company` TEXT NOT NULL, `salary` TEXT NOT NULL, `date` INTEGER NOT NULL, PRIMARY KEY(`id`))\",\r\n        \"fields\": [\r\n          {\r\n            \"fieldPath\": \"id\",\r\n            \"columnName\": \"id\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"iconUri\",\r\n            \"columnName\": \"iconUri\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"title\",\r\n            \"columnName\": \"title\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"company\",\r\n            \"columnName\": \"company\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"salary\",\r\n            \"columnName\": \"salary\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"date\",\r\n            \"columnName\": \"date\",\r\n            \"affinity\": \"INTEGER\",\r\n            \"notNull\": true\r\n          }\r\n        ],\r\n        \"primaryKey\": {\r\n          \"autoGenerate\": false,\r\n          \"columnNames\": [\r\n            \"id\"\r\n          ]\r\n        },\r\n        \"indices\": [],\r\n        \"foreignKeys\": []\r\n      }\r\n    ],\r\n    \"views\": [],\r\n    \"setupQueries\": [\r\n      \"CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)\",\r\n      \"INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '2123ebc230221aef59ae2ac4a7ba1758')\"\r\n    ]\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/schemas/ru.practicum.android.diploma.details.data.db.FavoriteVacanciesDb/1.json b/app/schemas/ru.practicum.android.diploma.details.data.db.FavoriteVacanciesDb/1.json
--- a/app/schemas/ru.practicum.android.diploma.details.data.db.FavoriteVacanciesDb/1.json	
+++ b/app/schemas/ru.practicum.android.diploma.details.data.db.FavoriteVacanciesDb/1.json	
@@ -2,11 +2,11 @@
   "formatVersion": 1,
   "database": {
     "version": 1,
-    "identityHash": "2123ebc230221aef59ae2ac4a7ba1758",
+    "identityHash": "475a82a83a7ade2b9b472a8c4ee31b2d",
     "entities": [
       {
         "tableName": "favorite_vacancies",
-        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER NOT NULL, `iconUri` TEXT NOT NULL, `title` TEXT NOT NULL, `company` TEXT NOT NULL, `salary` TEXT NOT NULL, `date` INTEGER NOT NULL, PRIMARY KEY(`id`))",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER NOT NULL, `iconUri` TEXT NOT NULL, `title` TEXT NOT NULL, `company` TEXT NOT NULL, `salary` TEXT NOT NULL, `area` TEXT NOT NULL, `date` INTEGER NOT NULL, PRIMARY KEY(`id`))",
         "fields": [
           {
             "fieldPath": "id",
@@ -37,6 +37,12 @@
             "columnName": "salary",
             "affinity": "TEXT",
             "notNull": true
+          },
+          {
+            "fieldPath": "area",
+            "columnName": "area",
+            "affinity": "TEXT",
+            "notNull": true
           },
           {
             "fieldPath": "date",
@@ -58,7 +64,7 @@
     "views": [],
     "setupQueries": [
       "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
-      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '2123ebc230221aef59ae2ac4a7ba1758')"
+      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '475a82a83a7ade2b9b472a8c4ee31b2d')"
     ]
   }
 }
\ No newline at end of file
Index: app/src/main/java/ru/practicum/android/diploma/details/data/model/VacancyEntity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.details.data.model\r\n\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\n\r\n@Entity(tableName = \"favorite_vacancies\")\r\ndata class VacancyEntity(\r\n    @PrimaryKey\r\n    val id: Long,\r\n    val iconUri: String = \"\",\r\n    val title: String = \"\",\r\n    val company: String = \"\",\r\n    val salary: String = \"\",\r\n    val date: Long\r\n)\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/details/data/model/VacancyEntity.kt b/app/src/main/java/ru/practicum/android/diploma/details/data/model/VacancyEntity.kt
--- a/app/src/main/java/ru/practicum/android/diploma/details/data/model/VacancyEntity.kt	
+++ b/app/src/main/java/ru/practicum/android/diploma/details/data/model/VacancyEntity.kt	
@@ -11,6 +11,7 @@
     val title: String = "",
     val company: String = "",
     val salary: String = "",
+    val area: String = "",
     val date: Long
 )
 
Index: app/src/main/java/ru/practicum/android/diploma/details/data/model/VacancyConverter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.details.data.model\r\n\r\nimport ru.practicum.android.diploma.search.domain.models.Vacancy\r\nimport javax.inject.Inject\r\n\r\nclass VacancyConverter @Inject constructor() {\r\n\r\n    fun toVacancy(vacancyEntity: VacancyEntity): Vacancy {\r\n        return with(vacancyEntity) {\r\n            Vacancy(\r\n                id = id,\r\n                iconUri = iconUri,\r\n                title = title,\r\n                company = company,\r\n                salary = salary,\r\n                date = date\r\n            )\r\n        }\r\n    }\r\n    fun toEntity(vacancy: Vacancy): VacancyEntity {\r\n        return with(vacancy) {\r\n            VacancyEntity(\r\n                id = id,\r\n                iconUri = iconUri,\r\n                title = title,\r\n                company = company,\r\n                salary = salary,\r\n                date = date\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    fun mapToVacancies(entities: List<VacancyEntity>): List<Vacancy>{\r\n        return entities.map { toVacancy(it) }\r\n    }\r\n    fun mapToEntities(vacancies: List<Vacancy>): List<VacancyEntity>{\r\n        return vacancies.map { toEntity(it) }\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/details/data/model/VacancyConverter.kt b/app/src/main/java/ru/practicum/android/diploma/details/data/model/VacancyConverter.kt
--- a/app/src/main/java/ru/practicum/android/diploma/details/data/model/VacancyConverter.kt	
+++ b/app/src/main/java/ru/practicum/android/diploma/details/data/model/VacancyConverter.kt	
@@ -13,7 +13,8 @@
                 title = title,
                 company = company,
                 salary = salary,
-                date = date
+                date = date,
+                area = area
             )
         }
     }
@@ -25,7 +26,8 @@
                 title = title,
                 company = company,
                 salary = salary,
-                date = date
+                date = date,
+                area = area
             )
         }
     }
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.kotlin.android)\r\n    alias(libs.plugins.kotlin.serialization)\r\n    alias(libs.plugins.kapt)\r\n    alias(libs.plugins.ksp)\r\n    id(\"ru.practicum.android.diploma.plugins.developproperties\")\r\n}\r\n\r\nandroid {\r\n    namespace = \"ru.practicum.android.diploma\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"ru.practicum.android.diploma\"\r\n        minSdk = 26\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n\r\n        ksp { arg(\"room.schemaLocation\", \"$projectDir/schemas\") }\r\n\r\n        buildConfigField(type = \"String\", name = \"HH_ACCESS_TOKEN\", value = \"\\\"${developProperties.hhAccessToken}\\\"\")\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(getDefaultProguardFile(\"proguard-android-optimize.txt\"), \"proguard-rules.pro\")\r\n            signingConfig = signingConfigs.getByName(\"debug\")\r\n        }\r\n        debug {\r\n            signingConfig = signingConfigs.getByName(\"debug\")\r\n        }\r\n    }\r\n\r\n    java { toolchain.languageVersion.set(JavaLanguageVersion.of(18)) }\r\n    kotlinOptions { jvmTarget = \"18\" }\r\n\r\n    buildFeatures {\r\n        viewBinding = true\r\n        buildConfig = true\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation(libs.core.ktx)\r\n    implementation(libs.appcompat)\r\n    implementation(libs.material)\r\n    implementation(libs.constraintlayout)\r\n    implementation(libs.bundles.navigation.component)\r\n    implementation(libs.bundles.serialization)\r\n    implementation(libs.coroutines.android)\r\n    implementation(libs.bundles.retrofit2)\r\n    implementation(libs.bundles.room)\r\n    implementation(libs.dagger)\r\n    implementation(libs.glide)\r\n    kapt(libs.dagger.compiler)\r\n    ksp(libs.glide.compiler)\r\n    ksp(libs.room.compiler)\r\n    implementation(libs.kotlinx.retrofit)\r\n\r\n    // Test\r\n    implementation(libs.junit)\r\n    implementation(libs.androidx.junit)\r\n    implementation(libs.test.espresso.core)\r\n\r\n \r\n    // LeakCanary\r\n    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1'\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	
+++ b/app/build.gradle.kts	
@@ -4,6 +4,7 @@
     alias(libs.plugins.kotlin.serialization)
     alias(libs.plugins.kapt)
     alias(libs.plugins.ksp)
+    id("kotlin-kapt")
     id("ru.practicum.android.diploma.plugins.developproperties")
 }
 
Index: app/src/main/java/ru/practicum/android/diploma/details/view_model/DetailsViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.details.view_model\r\n\r\nimport androidx.lifecycle.viewModelScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.flow.MutableStateFlow\r\nimport kotlinx.coroutines.flow.StateFlow\r\nimport kotlinx.coroutines.flow.asStateFlow\r\nimport kotlinx.coroutines.launch\r\nimport ru.practicum.android.diploma.Logger\r\nimport ru.practicum.android.diploma.details.ui.DetailsScreenState\r\nimport ru.practicum.android.diploma.root.BaseViewModel\r\nimport ru.practicum.android.diploma.search.domain.models.VacancyFullInfoModel\r\nimport ru.practicum.android.diploma.search.domain.models.assistants.Contacts\r\nimport ru.practicum.android.diploma.search.domain.models.assistants.Employment\r\nimport ru.practicum.android.diploma.search.domain.models.assistants.Experience\r\nimport ru.practicum.android.diploma.search.domain.models.assistants.KeySkill\r\nimport ru.practicum.android.diploma.search.domain.models.assistants.Phone\r\nimport ru.practicum.android.diploma.search.domain.models.assistants.Schedule\r\nimport ru.practicum.android.diploma.util.thisName\r\nimport javax.inject.Inject\r\n\r\n/** ViewModel для экрана деталей вакансии */\r\nclass DetailsViewModel@Inject constructor(\r\n    val logger: Logger\r\n) : BaseViewModel(logger) {\r\n\r\n    private val uiStateMutable = MutableStateFlow<DetailsScreenState>(DetailsScreenState.Empty)\r\n    val uiState: StateFlow<DetailsScreenState> = uiStateMutable.asStateFlow()\r\n\r\n    /** Получение вакансии по ID. Пока что моковые данные без запроса к серверу */\r\n    fun getVacancyByID() {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            logger.log(thisName, \"getVacancyByID()\")\r\n            uiStateMutable.emit(DetailsScreenState.Content(mokData()))\r\n        }\r\n    }\r\n\r\n\r\n    /** Моковые данные. После подключения репозитория будут удалены */\r\n    private fun mokData(): VacancyFullInfoModel {\r\n        return VacancyFullInfoModel(\r\n            id = \"85773787\",\r\n            experience = Experience(\r\n                id = \"between1And3\",\r\n                name = \"От 1 года до 3 лет\"\r\n            ),\r\n            employment = Employment(\r\n                id = \"full\",\r\n                name = \"Полная занятость\"\r\n            ),\r\n            schedule = Schedule(\r\n                id = \"fullDay\",\r\n                name = \"Полный день\"\r\n            ),\r\n            description = \"<p>Playrix является крупнейшей игровой компанией в Европе и входит в топ-3 самых успешных мобильных разработчиков в мире. Мы создали такие хиты, как Gardenscapes, Fishdom, Manor Matters, Homescapes, Wildscapes и Township, которые скачали более 2 миллиардов игроков. В игры Playrix каждый месяц играют более 100 миллионов человек.</p> <p>Команда саппорта Playrix ищет продакт-менеджера по клиентскому опыту.</p> <p>Вам предстоит анализировать метрики саппорта, придумывать, как можно улучшить процессы и жизнь нашего пользователя, защищать и реализовывать свои проекты.</p> <p>От нас — свобода в решениях, ресурсы и сильная операционная команда. От вас — опыт работы с проектами и желание постоянно улучшать клиентский сервис.</p> <p>Лидируя проекты в тесной связке с другими командами саппорта, ты сможешь влиять на развитие игры и делать миллионы наших игроков счастливее.</p> <p><em>Эта вакансия предполагает возможность работы в одном из наших офисов на Кипре, Сербии, Черногории, Армении, Казахстане либо удаленно.</em></p> <p><strong>Наши задачи:</strong></p> <ul> <li> <p>выстраивание новых процессов работы с обращениями пользователей и оптимизация текущих;</p> </li> <li> <p>работа с аналитикой операционных и ключевых показателей команды;</p> </li> <li> <p>запуск и улучшение инструментов саппорта: тикетные системы, AI, боты, статистика и т. д.;</p> </li> <li> <p>работа с метриками NPS, CES, CSAT, составление CJM и проведение пользовательских интервью;</p> </li> <li> <p>эксперименты/проекты для улучшения клиентского опыта;</p> </li> <li> <p>активное участие в стратегическом планировании команды саппорта.</p> </li> </ul> <p><strong>Мы ожидаем, что вы:</strong></p> <ul> <li> <p>работали в клиентском сервисе не менее 3 лет в крупных геймдев / IT компаниях;</p> </li> <li> <p>знаете английский язык на уровне не ниже B2 (как письменный, так и устный);</p> </li> <li> <p>имеете опыт работы с внешними тикетными системами и другими партнерами;</p> </li> <li> <p>работали с проектами: умеете планировать проект, разбивать его на блоки и задачи, расставлять приоритеты и решать задачи в срок в быстро меняющихся условиях;</p> </li> <li> <p>можете принимать решения как на основе большого объёма данных, так и при полном их отсутствии;</p> </li> <li> <p>обладаете развитыми коммуникативными навыками и умеете отстаивать свою позицию как с внешними партнерами, так и агентами или продакт директорами внутри компании.</p> </li> <li> <p>проактивны и самостоятельны в изменениях существующей логики или процессов;</p> </li> <li> <p>способны работать в условиях многозадачности (несколько разноплановых проектов одновременно), готовы к высокой скорости работы, быстро адаптируетесь к условиям постоянных изменений и роста продукта.</p> </li> </ul> <p><strong>Мы предлагаем</strong>:</p> <p><strong>Комфортные условия</strong>. Работайте в офисе, удаленно и в гибридном формате. У нас есть все для комфортной работы, где бы вы не находились.</p> <p><strong>Забота о здоровье</strong>. Компенсируем онлайн-сессии с психологом, открываем для вас и ваших детей ДМС со стоматологией и лечением от COVID-19.</p> <p><strong>Забота о благополучии</strong>. Сохраняем 100% зарплату во время отпуска или больничного без лишних справок. А для особых случаев предоставим дополнительные выходные.</p> <p><strong>Развитие и обучение</strong>. Оплачиваем участие в профильных конференциях и курсах, регулярно проводим внутренние буткемпы и предлагаем скидки на курсы английского языка.</p> <p><strong>Развлечения и мерч</strong>. Конкурсы, спортивные челленджи, вечеринки, хакатоны и внутренние офлайн-ивенты для команд — каждый год мы проводим сотни мероприятий по всему миру.</p> <p><strong>Спорт и фитнес</strong>. Поддерживаем здоровый образ жизни и компенсируем покупку любых спортивных абонементов и подписки на фитнес-приложения.</p> <p><strong>Социальные проекты</strong>. Запускаем благотворительные проекты и поддерживаем идеи сотрудников в конкурсе грантов.</p>\",\r\n            keySkills = listOf(\r\n                KeySkill(\r\n                    name = \"Разработка инструкций\"\r\n                ),\r\n                KeySkill(\r\n                    name = \"Разработка технических заданий\"\r\n                ),\r\n                KeySkill(\r\n                    name = \"Работа в команде\"\r\n                ),\r\n                KeySkill(\r\n                    name = \"MS Visio\"\r\n                )\r\n            ),\r\n            contacts = Contacts(\r\n                email = \"user@example.com\",\r\n                name = \"Виктория Иванова\",\r\n                phones = listOf(\r\n                    Phone(\r\n                        comment = null,\r\n                        number = \"000-00-00\",\r\n                        city = \"985\",\r\n                        country = \"7\"\r\n                    )\r\n                )\r\n            )\r\n        )\r\n    }\r\n\r\n}
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/details/view_model/DetailsViewModel.kt b/app/src/main/java/ru/practicum/android/diploma/details/view_model/DetailsViewModel.kt
--- a/app/src/main/java/ru/practicum/android/diploma/details/view_model/DetailsViewModel.kt	
+++ b/app/src/main/java/ru/practicum/android/diploma/details/view_model/DetailsViewModel.kt	
@@ -1,5 +1,3 @@
-package ru.practicum.android.diploma.details.view_model
-
 import androidx.lifecycle.viewModelScope
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.flow.MutableStateFlow
@@ -7,8 +5,10 @@
 import kotlinx.coroutines.flow.asStateFlow
 import kotlinx.coroutines.launch
 import ru.practicum.android.diploma.Logger
+import ru.practicum.android.diploma.details.domain.DetailsInteractor
 import ru.practicum.android.diploma.details.ui.DetailsScreenState
 import ru.practicum.android.diploma.root.BaseViewModel
+import ru.practicum.android.diploma.search.domain.models.Vacancy
 import ru.practicum.android.diploma.search.domain.models.VacancyFullInfoModel
 import ru.practicum.android.diploma.search.domain.models.assistants.Contacts
 import ru.practicum.android.diploma.search.domain.models.assistants.Employment
@@ -20,13 +20,34 @@
 import javax.inject.Inject
 
 /** ViewModel для экрана деталей вакансии */
-class DetailsViewModel@Inject constructor(
-    val logger: Logger
+class DetailsViewModel @Inject constructor(
+    val logger: Logger,
+    private val detailsInteractor: DetailsInteractor
 ) : BaseViewModel(logger) {
 
     private val uiStateMutable = MutableStateFlow<DetailsScreenState>(DetailsScreenState.Empty)
     val uiState: StateFlow<DetailsScreenState> = uiStateMutable.asStateFlow()
 
+    /** Получение вакансии по ID. */
+    fun addToFavorites(vacancy: Vacancy){
+        viewModelScope.launch(Dispatchers.IO) {
+            log(thisName, "addToFavorites   }")
+            detailsInteractor.addVacancyToFavorites(vacancy).collect{
+                log(thisName, "id inserted= $it")
+            }
+        }
+    }
+
+    /** Удаление вакансии из избранного */
+    fun deleteVacancy(id: Long){
+        viewModelScope.launch(Dispatchers.IO) {
+            detailsInteractor.removeVacancyFromFavorite(id).collect{
+                log(thisName,"$id was removed")
+            }
+        }
+    }
+
+
     /** Получение вакансии по ID. Пока что моковые данные без запроса к серверу */
     fun getVacancyByID() {
         viewModelScope.launch(Dispatchers.IO) {
